
SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000098  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001df  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000015d  00000000  00000000  00000405  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001df  00000000  00000000  00000562  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000090  00000000  00000000  00000744  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000010d  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000050  00000000  00000000  000008e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "../Code/my_spi.h"

int main(void)
{
	unsigned int rdata = 0;
	DDRC = 0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
  96:	15 ba       	out	0x15, r1	; 21
	
	SPI_SlaveInit();
  98:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_SlaveInit>
	
	while(1)
	{
		rdata = SPI_GetChar();
  9c:	0e 94 62 00 	call	0xc4	; 0xc4 <SPI_GetChar>
		PORTC = rdata;
  a0:	85 bb       	out	0x15, r24	; 21
  a2:	fc cf       	rjmp	.-8      	; 0x9c <main+0xa>

000000a4 <SPI_MasterInit>:
#include "my_spi.h"

void SPI_MasterInit(void)
{
	// Set The MOSI
	DDRB = 0xB0;
  a4:	80 eb       	ldi	r24, 0xB0	; 176
  a6:	87 bb       	out	0x17, r24	; 23
	
	// Set SPI as Master
	SPCR = 0x58;
  a8:	88 e5       	ldi	r24, 0x58	; 88
  aa:	8d b9       	out	0x0d, r24	; 13
	SPSR = 0x00;
  ac:	1e b8       	out	0x0e, r1	; 14
}
  ae:	08 95       	ret

000000b0 <SPI_SlaveInit>:

void SPI_SlaveInit(void)
{
	// Set The MOSI
	DDRB = 0x40;
  b0:	80 e4       	ldi	r24, 0x40	; 64
  b2:	87 bb       	out	0x17, r24	; 23

	// Set SPI as Slave
	SPCR = 0x48;
  b4:	88 e4       	ldi	r24, 0x48	; 72
  b6:	8d b9       	out	0x0d, r24	; 13
	SPSR = 0x00;
  b8:	1e b8       	out	0x0e, r1	; 14
}
  ba:	08 95       	ret

000000bc <SPI_SendChar>:

void SPI_SendChar(unsigned char data)
{
	SPDR = data;
  bc:	8f b9       	out	0x0f, r24	; 15
	while((SPSR&0x80)==0);
  be:	77 9b       	sbis	0x0e, 7	; 14
  c0:	fe cf       	rjmp	.-4      	; 0xbe <SPI_SendChar+0x2>
}
  c2:	08 95       	ret

000000c4 <SPI_GetChar>:

unsigned char SPI_GetChar(void)
{
	while((SPSR&0x80)==0);
  c4:	77 9b       	sbis	0x0e, 7	; 14
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <SPI_GetChar>
	return SPDR;
  c8:	8f b1       	in	r24, 0x0f	; 15
}
  ca:	08 95       	ret

000000cc <SPI_SendString>:

void SPI_SendString(unsigned char *str)
{
  cc:	fc 01       	movw	r30, r24
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <SPI_SendString+0xc>
	SPSR = 0x00;
}

void SPI_SendChar(unsigned char data)
{
	SPDR = data;
  d0:	8f b9       	out	0x0f, r24	; 15
	while((SPSR&0x80)==0);
  d2:	77 9b       	sbis	0x0e, 7	; 14
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <SPI_SendString+0x6>
void SPI_SendString(unsigned char *str)
{
	while(*str != '\0')
	{
		SPI_SendChar(*str);
		str++;
  d6:	31 96       	adiw	r30, 0x01	; 1
	return SPDR;
}

void SPI_SendString(unsigned char *str)
{
	while(*str != '\0')
  d8:	80 81       	ld	r24, Z
  da:	88 23       	and	r24, r24
  dc:	c9 f7       	brne	.-14     	; 0xd0 <SPI_SendString+0x4>
	{
		SPI_SendChar(*str);
		str++;
	}
}
  de:	08 95       	ret

000000e0 <SPI_GetString>:

void SPI_GetString(unsigned char *str)
{
  e0:	fc 01       	movw	r30, r24
	while((SPSR&0x80)==0);
}

unsigned char SPI_GetChar(void)
{
	while((SPSR&0x80)==0);
  e2:	77 9b       	sbis	0x0e, 7	; 14
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <SPI_GetString+0x2>
	return SPDR;
  e6:	8f b1       	in	r24, 0x0f	; 15
{
	unsigned char data = 0;
	do
	{
		data = SPI_GetChar();
		*str = data;
  e8:	80 83       	st	Z, r24
		str++;
	}while(data != '#');
  ea:	83 32       	cpi	r24, 0x23	; 35
  ec:	11 f0       	breq	.+4      	; 0xf2 <SPI_GetString+0x12>
	unsigned char data = 0;
	do
	{
		data = SPI_GetChar();
		*str = data;
		str++;
  ee:	31 96       	adiw	r30, 0x01	; 1
  f0:	f8 cf       	rjmp	.-16     	; 0xe2 <SPI_GetString+0x2>
	}while(data != '#');
	str--;
	*str = '\0';
  f2:	10 82       	st	Z, r1
}
  f4:	08 95       	ret

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
