
TestLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000001d4  00000248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000085  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002da  00000000  00000000  0000034d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000225  00000000  00000000  00000627  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000029c  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000141  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000fe  00000000  00000000  00000ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000da7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ed       	ldi	r30, 0xD4	; 212
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3a       	cpi	r26, 0xA0	; 160
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <avr/io.h>
#include "my_uart.h"
#include <util/delay.h>

int main(void)
{
  92:	cf 92       	push	r12
  94:	df 92       	push	r13
  96:	ef 92       	push	r14
  98:	ff 92       	push	r15
  9a:	1f 93       	push	r17
  9c:	df 93       	push	r29
  9e:	cf 93       	push	r28
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
  a4:	c0 54       	subi	r28, 0x40	; 64
  a6:	d0 40       	sbci	r29, 0x00	; 0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	f8 94       	cli
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	cd bf       	out	0x3d, r28	; 61
	unsigned char str[4][16] = {"F18 Group#", "Embedded Fab#", "UART Test#", "End#"};
  b2:	fe 01       	movw	r30, r28
  b4:	31 96       	adiw	r30, 0x01	; 1
  b6:	80 e4       	ldi	r24, 0x40	; 64
  b8:	df 01       	movw	r26, r30
  ba:	1d 92       	st	X+, r1
  bc:	8a 95       	dec	r24
  be:	e9 f7       	brne	.-6      	; 0xba <main+0x28>
  c0:	a0 e6       	ldi	r26, 0x60	; 96
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	8b e0       	ldi	r24, 0x0B	; 11
  c6:	0d 90       	ld	r0, X+
  c8:	01 92       	st	Z+, r0
  ca:	81 50       	subi	r24, 0x01	; 1
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x34>
  ce:	fe 01       	movw	r30, r28
  d0:	3c 96       	adiw	r30, 0x0c	; 12
  d2:	85 e0       	ldi	r24, 0x05	; 5
  d4:	df 01       	movw	r26, r30
  d6:	1d 92       	st	X+, r1
  d8:	8a 95       	dec	r24
  da:	e9 f7       	brne	.-6      	; 0xd6 <main+0x44>
  dc:	de 01       	movw	r26, r28
  de:	51 96       	adiw	r26, 0x11	; 17
  e0:	e0 e7       	ldi	r30, 0x70	; 112
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	8e e0       	ldi	r24, 0x0E	; 14
  e6:	01 90       	ld	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	81 50       	subi	r24, 0x01	; 1
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x54>
  ee:	18 a2       	std	Y+32, r1	; 0x20
  f0:	1f 8e       	std	Y+31, r1	; 0x1f
  f2:	de 01       	movw	r26, r28
  f4:	91 96       	adiw	r26, 0x21	; 33
  f6:	e0 e8       	ldi	r30, 0x80	; 128
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	8b e0       	ldi	r24, 0x0B	; 11
  fc:	01 90       	ld	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	81 50       	subi	r24, 0x01	; 1
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x6a>
 104:	fe 01       	movw	r30, r28
 106:	bc 96       	adiw	r30, 0x2c	; 44
 108:	85 e0       	ldi	r24, 0x05	; 5
 10a:	df 01       	movw	r26, r30
 10c:	1d 92       	st	X+, r1
 10e:	8a 95       	dec	r24
 110:	e9 f7       	brne	.-6      	; 0x10c <main+0x7a>
 112:	de 01       	movw	r26, r28
 114:	d1 96       	adiw	r26, 0x31	; 49
 116:	e0 e9       	ldi	r30, 0x90	; 144
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	85 e0       	ldi	r24, 0x05	; 5
 11c:	01 90       	ld	r0, Z+
 11e:	0d 92       	st	X+, r0
 120:	81 50       	subi	r24, 0x01	; 1
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x8a>
 124:	fe 01       	movw	r30, r28
 126:	f6 96       	adiw	r30, 0x36	; 54
 128:	8b e0       	ldi	r24, 0x0B	; 11
 12a:	df 01       	movw	r26, r30
 12c:	1d 92       	st	X+, r1
 12e:	8a 95       	dec	r24
 130:	e9 f7       	brne	.-6      	; 0x12c <main+0x9a>
	unsigned char count = 0;

    // init uart
	UART_Init();
 132:	0e 94 c3 00 	call	0x186	; 0x186 <UART_Init>
 136:	80 e2       	ldi	r24, 0x20	; 32
 138:	9e e4       	ldi	r25, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 13a:	28 ec       	ldi	r18, 0xC8	; 200
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	f9 01       	movw	r30, r18
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0xae>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 144:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 146:	d9 f7       	brne	.-10     	; 0x13e <main+0xac>
 148:	10 e0       	ldi	r17, 0x00	; 0

	while(1)
	{
		for(count=0; count<4; count++)
		{
			UART_SendString(str[count]);
 14a:	6e 01       	movw	r12, r28
 14c:	08 94       	sec
 14e:	c1 1c       	adc	r12, r1
 150:	d1 1c       	adc	r13, r1
 152:	38 ec       	ldi	r19, 0xC8	; 200
 154:	e3 2e       	mov	r14, r19
 156:	f1 2c       	mov	r15, r1
 158:	81 2f       	mov	r24, r17
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	24 e0       	ldi	r18, 0x04	; 4
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	2a 95       	dec	r18
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0xcc>
 166:	8c 0d       	add	r24, r12
 168:	9d 1d       	adc	r25, r13
 16a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_SendString>
 16e:	80 e5       	ldi	r24, 0x50	; 80
 170:	93 ec       	ldi	r25, 0xC3	; 195
 172:	f7 01       	movw	r30, r14
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <main+0xe2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 178:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 17a:	d9 f7       	brne	.-10     	; 0x172 <main+0xe0>
	// Delay for Let Rx Be stablized
	_delay_ms(2000);

	while(1)
	{
		for(count=0; count<4; count++)
 17c:	1f 5f       	subi	r17, 0xFF	; 255
 17e:	14 30       	cpi	r17, 0x04	; 4
 180:	58 f3       	brcs	.-42     	; 0x158 <main+0xc6>
 182:	10 e0       	ldi	r17, 0x00	; 0
 184:	e9 cf       	rjmp	.-46     	; 0x158 <main+0xc6>

00000186 <UART_Init>:
#include <avr/io.h>

void UART_Init(void)
{
	// Set BaudRate -> 9600/8MhZ
	UBRRL = 51;
 186:	83 e3       	ldi	r24, 0x33	; 51
 188:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0;
 18a:	10 bc       	out	0x20, r1	; 32
	// Set Frame Formta -> 8 data, 1 stop, No Parity
	UCSRC = 0x86;
 18c:	86 e8       	ldi	r24, 0x86	; 134
 18e:	80 bd       	out	0x20, r24	; 32
	// Enable RX and TX
	UCSRB = 0x18;
 190:	88 e1       	ldi	r24, 0x18	; 24
 192:	8a b9       	out	0x0a, r24	; 10
}
 194:	08 95       	ret

00000196 <UART_SendChar>:

void UART_SendChar(unsigned char data)
{
	// Wait untill transmission Register Empty
	while((UCSRA&0x20) == 0x00);
 196:	5d 9b       	sbis	0x0b, 5	; 11
 198:	fe cf       	rjmp	.-4      	; 0x196 <UART_SendChar>
	UDR = data;
 19a:	8c b9       	out	0x0c, r24	; 12
}
 19c:	08 95       	ret

0000019e <UART_GetChar>:

unsigned char UART_GetChar(void)
{
	// Wait untill Reception Complete
	while((UCSRA&0x80) == 0x00);
 19e:	5f 9b       	sbis	0x0b, 7	; 11
 1a0:	fe cf       	rjmp	.-4      	; 0x19e <UART_GetChar>
	return UDR;
 1a2:	8c b1       	in	r24, 0x0c	; 12
}
 1a4:	08 95       	ret

000001a6 <UART_SendString>:

void UART_SendString(unsigned char *str)
{
 1a6:	fc 01       	movw	r30, r24
 1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <UART_SendString+0xc>
}

void UART_SendChar(unsigned char data)
{
	// Wait untill transmission Register Empty
	while((UCSRA&0x20) == 0x00);
 1aa:	5d 9b       	sbis	0x0b, 5	; 11
 1ac:	fe cf       	rjmp	.-4      	; 0x1aa <UART_SendString+0x4>
	UDR = data;
 1ae:	8c b9       	out	0x0c, r24	; 12
void UART_SendString(unsigned char *str)
{
	while(*str != '\0')
	{
		UART_SendChar(*str);
		str++;
 1b0:	31 96       	adiw	r30, 0x01	; 1
	return UDR;
}

void UART_SendString(unsigned char *str)
{
	while(*str != '\0')
 1b2:	80 81       	ld	r24, Z
 1b4:	88 23       	and	r24, r24
 1b6:	c9 f7       	brne	.-14     	; 0x1aa <UART_SendString+0x4>
	{
		UART_SendChar(*str);
		str++;
	}
}
 1b8:	08 95       	ret

000001ba <UART_GetString>:

void UART_GetString(unsigned char *str)
{
 1ba:	fc 01       	movw	r30, r24
}

unsigned char UART_GetChar(void)
{
	// Wait untill Reception Complete
	while((UCSRA&0x80) == 0x00);
 1bc:	5f 9b       	sbis	0x0b, 7	; 11
 1be:	fe cf       	rjmp	.-4      	; 0x1bc <UART_GetString+0x2>
	return UDR;
 1c0:	8c b1       	in	r24, 0x0c	; 12
{
	unsigned char temp = 0;
	do
	{
		temp = UART_GetChar();
		*str = temp;
 1c2:	80 83       	st	Z, r24
		str++;
	}while(temp != '#');
 1c4:	83 32       	cpi	r24, 0x23	; 35
 1c6:	11 f0       	breq	.+4      	; 0x1cc <UART_GetString+0x12>
	unsigned char temp = 0;
	do
	{
		temp = UART_GetChar();
		*str = temp;
		str++;
 1c8:	31 96       	adiw	r30, 0x01	; 1
 1ca:	f8 cf       	rjmp	.-16     	; 0x1bc <UART_GetString+0x2>
	}while(temp != '#');
	
	str--;
	*str = '\0';
 1cc:	10 82       	st	Z, r1
}
 1ce:	08 95       	ret

000001d0 <_exit>:
 1d0:	f8 94       	cli

000001d2 <__stop_program>:
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <__stop_program>
