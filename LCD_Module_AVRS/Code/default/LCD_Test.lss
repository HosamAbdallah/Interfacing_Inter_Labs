
LCD_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000026a  000002fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080006e  0080006e  0000030c  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000b6  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000075f  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000297  00000000  00000000  00000b61  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000054c  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001344  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000167  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000232  00000000  00000000  0000155b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  0000178d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 37       	cpi	r26, 0x7F	; 127
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  8a:	0c 94 33 01 	jmp	0x266	; 0x266 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <convertData>:
#include "my_LCD.h"
#include <util/delay.h>

char* convertData(unsigned int var)
{
  92:	9c 01       	movw	r18, r24
	static char data[17];
	char* arr = &data[16];

	*arr = '\0';
  94:	10 92 7e 00 	sts	0x007E, r1
  98:	ee e7       	ldi	r30, 0x7E	; 126
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	0d c0       	rjmp	.+26     	; 0xb8 <convertData+0x26>

	while(var != 0)
	{
		arr--;
		*arr = (var%10) + '0';
  9e:	c9 01       	movw	r24, r18
  a0:	6a e0       	ldi	r22, 0x0A	; 10
  a2:	70 e0       	ldi	r23, 0x00	; 0
  a4:	0e 94 1f 01 	call	0x23e	; 0x23e <__udivmodhi4>
  a8:	80 5d       	subi	r24, 0xD0	; 208
  aa:	82 93       	st	-Z, r24
		var = var / 10;	
  ac:	c9 01       	movw	r24, r18
  ae:	6a e0       	ldi	r22, 0x0A	; 10
  b0:	70 e0       	ldi	r23, 0x00	; 0
  b2:	0e 94 1f 01 	call	0x23e	; 0x23e <__udivmodhi4>
  b6:	9b 01       	movw	r18, r22
	static char data[17];
	char* arr = &data[16];

	*arr = '\0';

	while(var != 0)
  b8:	21 15       	cp	r18, r1
  ba:	31 05       	cpc	r19, r1
  bc:	81 f7       	brne	.-32     	; 0x9e <convertData+0xc>
		arr--;
		*arr = (var%10) + '0';
		var = var / 10;	
	}
	return arr;
}
  be:	cf 01       	movw	r24, r30
  c0:	08 95       	ret

000000c2 <main>:

int main(void)
{
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
	unsigned char x = 0;
	unsigned char state = 0;
	unsigned char mydata = 102;
	char* mycData;
	 
	LCD_Init();
  ca:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Init>
	mycData = convertData(mydata);
  ce:	86 e6       	ldi	r24, 0x66	; 102
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 49 00 	call	0x92	; 0x92 <convertData>
	LCD_SendString_XY(mycData, 0, 1);
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	41 e0       	ldi	r20, 0x01	; 1
  da:	0e 94 12 01 	call	0x224	; 0x224 <LCD_SendString_XY>
  de:	80 e2       	ldi	r24, 0x20	; 32
  e0:	9e e4       	ldi	r25, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e2:	29 e1       	ldi	r18, 0x19	; 25
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	f9 01       	movw	r30, r18
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ee:	d9 f7       	brne	.-10     	; 0xe6 <main+0x24>
  f0:	10 e0       	ldi	r17, 0x00	; 0
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	c9 e1       	ldi	r28, 0x19	; 25
  f6:	d0 e0       	ldi	r29, 0x00	; 0
	_delay_ms(2000);
	while(1)
	{
		
		LCD_SendString_XY("Welcome Board", x, 0);
  f8:	80 e6       	ldi	r24, 0x60	; 96
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	61 2f       	mov	r22, r17
  fe:	40 e0       	ldi	r20, 0x00	; 0
 100:	0e 94 12 01 	call	0x224	; 0x224 <LCD_SendString_XY>
 104:	88 e8       	ldi	r24, 0x88	; 136
 106:	93 e1       	ldi	r25, 0x13	; 19
 108:	fe 01       	movw	r30, r28
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <main+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 10e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 110:	d9 f7       	brne	.-10     	; 0x108 <main+0x46>
		_delay_ms(500);
		LCD_Clear();
 112:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Clear>
		if(state == 0)
 116:	00 23       	and	r16, r16
 118:	11 f4       	brne	.+4      	; 0x11e <main+0x5c>
		{
			x++;
 11a:	1f 5f       	subi	r17, 0xFF	; 255
 11c:	01 c0       	rjmp	.+2      	; 0x120 <main+0x5e>
		}
		else
		{
			x--;
 11e:	11 50       	subi	r17, 0x01	; 1
		}
		
		if((x==3) || (x==0))
 120:	13 30       	cpi	r17, 0x03	; 3
 122:	11 f0       	breq	.+4      	; 0x128 <main+0x66>
 124:	11 23       	and	r17, r17
 126:	41 f7       	brne	.-48     	; 0xf8 <main+0x36>
		{
			state = !state;
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	00 23       	and	r16, r16
 12c:	09 f4       	brne	.+2      	; 0x130 <main+0x6e>
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	08 2f       	mov	r16, r24
 132:	e2 cf       	rjmp	.-60     	; 0xf8 <main+0x36>

00000134 <LCD_Init>:
*/

void LCD_Init(void)
{
	// Set Data Port to be OP
	DDRA = 0xFF;
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
 138:	1b ba       	out	0x1b, r1	; 27

	// Set Control Port to be OP
	DDRB = 0x07;
 13a:	87 e0       	ldi	r24, 0x07	; 7
 13c:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x01;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	88 bb       	out	0x18, r24	; 24
}

void LCD_Send_Command(unsigned char cmd)
{
	// Put Cmd on Port
	PORTA = cmd;
 142:	88 e3       	ldi	r24, 0x38	; 56
 144:	8b bb       	out	0x1b, r24	; 27
	// Set R/W to W
	PORTB = PORTB & 0xFD;
 146:	c1 98       	cbi	0x18, 1	; 24
    // Set RS to Command
	PORTB = PORTB & 0xFB;
 148:	c2 98       	cbi	0x18, 2	; 24

	// E to be 0
	PORTB = PORTB & 0xFE;
 14a:	c0 98       	cbi	0x18, 0	; 24
 14c:	4a ef       	ldi	r20, 0xFA	; 250
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	ca 01       	movw	r24, r20
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <LCD_Init+0x1e>
	// Delay
	_delay_ms(1);
	// E to be 1
	PORTB = PORTB | 0x01;
 156:	c0 9a       	sbi	0x18, 0	; 24
 158:	28 ea       	ldi	r18, 0xA8	; 168
 15a:	31 e6       	ldi	r19, 0x61	; 97
 15c:	c9 01       	movw	r24, r18
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <LCD_Init+0x2a>
}

void LCD_Send_Command(unsigned char cmd)
{
	// Put Cmd on Port
	PORTA = cmd;
 162:	8c e0       	ldi	r24, 0x0C	; 12
 164:	8b bb       	out	0x1b, r24	; 27
	// Set R/W to W
	PORTB = PORTB & 0xFD;
 166:	c1 98       	cbi	0x18, 1	; 24
    // Set RS to Command
	PORTB = PORTB & 0xFB;
 168:	c2 98       	cbi	0x18, 2	; 24

	// E to be 0
	PORTB = PORTB & 0xFE;
 16a:	c0 98       	cbi	0x18, 0	; 24
 16c:	ca 01       	movw	r24, r20
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <LCD_Init+0x3a>
	// Delay
	_delay_ms(1);
	// E to be 1
	PORTB = PORTB | 0x01;
 172:	c0 9a       	sbi	0x18, 0	; 24
 174:	c9 01       	movw	r24, r18
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <LCD_Init+0x42>

	// Init LCD
	LCD_Send_Command(0x38);
	// LCD_on
	LCD_Send_Command(0x0C);
}
 17a:	08 95       	ret

0000017c <LCD_SendData>:

void LCD_SendData(unsigned char data)
{
	// Put Data on Port
	PORTA = data;
 17c:	8b bb       	out	0x1b, r24	; 27
	// Set R/W to W
	PORTB = PORTB & 0xFD; // ~(1<<RS_LOC)
 17e:	c1 98       	cbi	0x18, 1	; 24
    // Set RS to Data
	PORTB = PORTB | 0x04;
 180:	c2 9a       	sbi	0x18, 2	; 24

	// E to be 0
	PORTB = PORTB & 0xFE;
 182:	c0 98       	cbi	0x18, 0	; 24
 184:	8a ef       	ldi	r24, 0xFA	; 250
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCD_SendData+0xc>
	// Delay
	_delay_ms(1);
	// E to be 1
	PORTB = PORTB | 0x01;
 18c:	c0 9a       	sbi	0x18, 0	; 24
 18e:	88 ea       	ldi	r24, 0xA8	; 168
 190:	91 e6       	ldi	r25, 0x61	; 97
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <LCD_SendData+0x16>
	
	// Delay to let LCD Display Data
	_delay_ms(100);
}
 196:	08 95       	ret

00000198 <LCD_Send_Command>:

void LCD_Send_Command(unsigned char cmd)
{
	// Put Cmd on Port
	PORTA = cmd;
 198:	8b bb       	out	0x1b, r24	; 27
	// Set R/W to W
	PORTB = PORTB & 0xFD;
 19a:	c1 98       	cbi	0x18, 1	; 24
    // Set RS to Command
	PORTB = PORTB & 0xFB;
 19c:	c2 98       	cbi	0x18, 2	; 24

	// E to be 0
	PORTB = PORTB & 0xFE;
 19e:	c0 98       	cbi	0x18, 0	; 24
 1a0:	8a ef       	ldi	r24, 0xFA	; 250
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <LCD_Send_Command+0xc>
	// Delay
	_delay_ms(1);
	// E to be 1
	PORTB = PORTB | 0x01;
 1a8:	c0 9a       	sbi	0x18, 0	; 24
 1aa:	88 ea       	ldi	r24, 0xA8	; 168
 1ac:	91 e6       	ldi	r25, 0x61	; 97
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <LCD_Send_Command+0x16>
	
	// Delay to let LCD Execute Command
	_delay_ms(100);
}
 1b2:	08 95       	ret

000001b4 <LCD_Clear>:
}

void LCD_Send_Command(unsigned char cmd)
{
	// Put Cmd on Port
	PORTA = cmd;
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	8b bb       	out	0x1b, r24	; 27
	// Set R/W to W
	PORTB = PORTB & 0xFD;
 1b8:	c1 98       	cbi	0x18, 1	; 24
    // Set RS to Command
	PORTB = PORTB & 0xFB;
 1ba:	c2 98       	cbi	0x18, 2	; 24

	// E to be 0
	PORTB = PORTB & 0xFE;
 1bc:	c0 98       	cbi	0x18, 0	; 24
 1be:	8a ef       	ldi	r24, 0xFA	; 250
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <LCD_Clear+0xe>
	// Delay
	_delay_ms(1);
	// E to be 1
	PORTB = PORTB | 0x01;
 1c6:	c0 9a       	sbi	0x18, 0	; 24
 1c8:	88 ea       	ldi	r24, 0xA8	; 168
 1ca:	91 e6       	ldi	r25, 0x61	; 97
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <LCD_Clear+0x18>

void LCD_Clear(void)
{
	// Send Clr command to LCD
	LCD_Send_Command(0x01);
}
 1d0:	08 95       	ret

000001d2 <LCD_GotoXY>:

void LCD_GotoXY(unsigned char x, unsigned char y)
{
	if(y == 0)
 1d2:	66 23       	and	r22, r22
 1d4:	11 f4       	brne	.+4      	; 0x1da <LCD_GotoXY+0x8>
	{
		LCD_Send_Command(0x80 + x);
 1d6:	80 58       	subi	r24, 0x80	; 128
 1d8:	01 c0       	rjmp	.+2      	; 0x1dc <LCD_GotoXY+0xa>
	}
	else
	{
		LCD_Send_Command(0x80 + 0x40 + x);
 1da:	80 54       	subi	r24, 0x40	; 64
}

void LCD_Send_Command(unsigned char cmd)
{
	// Put Cmd on Port
	PORTA = cmd;
 1dc:	8b bb       	out	0x1b, r24	; 27
	// Set R/W to W
	PORTB = PORTB & 0xFD;
 1de:	c1 98       	cbi	0x18, 1	; 24
    // Set RS to Command
	PORTB = PORTB & 0xFB;
 1e0:	c2 98       	cbi	0x18, 2	; 24

	// E to be 0
	PORTB = PORTB & 0xFE;
 1e2:	c0 98       	cbi	0x18, 0	; 24
 1e4:	8a ef       	ldi	r24, 0xFA	; 250
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <LCD_GotoXY+0x16>
	// Delay
	_delay_ms(1);
	// E to be 1
	PORTB = PORTB | 0x01;
 1ec:	c0 9a       	sbi	0x18, 0	; 24
 1ee:	88 ea       	ldi	r24, 0xA8	; 168
 1f0:	91 e6       	ldi	r25, 0x61	; 97
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <LCD_GotoXY+0x20>
 1f6:	08 95       	ret

000001f8 <LCD_SendString>:
		LCD_Send_Command(0x80 + 0x40 + x);
	}
}

void LCD_SendString(char *str)
{
 1f8:	fc 01       	movw	r30, r24
 1fa:	4a ef       	ldi	r20, 0xFA	; 250
 1fc:	50 e0       	ldi	r21, 0x00	; 0
}

void LCD_SendData(unsigned char data)
{
	// Put Data on Port
	PORTA = data;
 1fe:	28 ea       	ldi	r18, 0xA8	; 168
 200:	31 e6       	ldi	r19, 0x61	; 97
 202:	0c c0       	rjmp	.+24     	; 0x21c <LCD_SendString+0x24>
 204:	8b bb       	out	0x1b, r24	; 27
	// Set R/W to W
	PORTB = PORTB & 0xFD; // ~(1<<RS_LOC)
 206:	c1 98       	cbi	0x18, 1	; 24
    // Set RS to Data
	PORTB = PORTB | 0x04;
 208:	c2 9a       	sbi	0x18, 2	; 24

	// E to be 0
	PORTB = PORTB & 0xFE;
 20a:	c0 98       	cbi	0x18, 0	; 24
 20c:	ca 01       	movw	r24, r20
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <LCD_SendString+0x16>
	// Delay
	_delay_ms(1);
	// E to be 1
	PORTB = PORTB | 0x01;
 212:	c0 9a       	sbi	0x18, 0	; 24
 214:	c9 01       	movw	r24, r18
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <LCD_SendString+0x1e>
void LCD_SendString(char *str)
{
	while(*str != '\0')
	{
		LCD_SendData(*str);
		str++;
 21a:	31 96       	adiw	r30, 0x01	; 1
	}
}

void LCD_SendString(char *str)
{
	while(*str != '\0')
 21c:	80 81       	ld	r24, Z
 21e:	88 23       	and	r24, r24
 220:	89 f7       	brne	.-30     	; 0x204 <LCD_SendString+0xc>
	{
		LCD_SendData(*str);
		str++;
	}
}
 222:	08 95       	ret

00000224 <LCD_SendString_XY>:

void LCD_SendString_XY(char *str, unsigned char x, unsigned char y)
{
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	8c 01       	movw	r16, r24
 22a:	86 2f       	mov	r24, r22
	LCD_GotoXY(x, y);
 22c:	64 2f       	mov	r22, r20
 22e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_GotoXY>
	LCD_SendString(str);
 232:	c8 01       	movw	r24, r16
 234:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_SendString>
}
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	08 95       	ret

0000023e <__udivmodhi4>:
 23e:	aa 1b       	sub	r26, r26
 240:	bb 1b       	sub	r27, r27
 242:	51 e1       	ldi	r21, 0x11	; 17
 244:	07 c0       	rjmp	.+14     	; 0x254 <__udivmodhi4_ep>

00000246 <__udivmodhi4_loop>:
 246:	aa 1f       	adc	r26, r26
 248:	bb 1f       	adc	r27, r27
 24a:	a6 17       	cp	r26, r22
 24c:	b7 07       	cpc	r27, r23
 24e:	10 f0       	brcs	.+4      	; 0x254 <__udivmodhi4_ep>
 250:	a6 1b       	sub	r26, r22
 252:	b7 0b       	sbc	r27, r23

00000254 <__udivmodhi4_ep>:
 254:	88 1f       	adc	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	5a 95       	dec	r21
 25a:	a9 f7       	brne	.-22     	; 0x246 <__udivmodhi4_loop>
 25c:	80 95       	com	r24
 25e:	90 95       	com	r25
 260:	bc 01       	movw	r22, r24
 262:	cd 01       	movw	r24, r26
 264:	08 95       	ret

00000266 <_exit>:
 266:	f8 94       	cli

00000268 <__stop_program>:
 268:	ff cf       	rjmp	.-2      	; 0x268 <__stop_program>
