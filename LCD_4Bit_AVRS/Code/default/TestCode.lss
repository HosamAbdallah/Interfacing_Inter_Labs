
TestCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000226  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000095  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000004fb  00000000  00000000  0000032f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000010c  00000000  00000000  0000082a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000003e2  00000000  00000000  00000936  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000090  00000000  00000000  00000d18  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000146  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001c8  00000000  00000000  00000eee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e2       	ldi	r30, 0x26	; 38
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <main>
  8a:	0c 94 11 01 	jmp	0x222	; 0x222 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Send_Command>:

// Send CMD to LCD
void LCD_Send_Command(unsigned char cmd)
{           
  // Make RS as Command
  PORTB = PORTB & (~(1<<0));
  92:	c0 98       	cbi	0x18, 0	; 24
  // Make It Write
  PORTB = PORTB & (~(1<<1));
  94:	c1 98       	cbi	0x18, 1	; 24
  
  // Put CMD on PORT
  PORTB &= 0x0F;  		// Make Data Nibble as 0000
  96:	98 b3       	in	r25, 0x18	; 24
  98:	9f 70       	andi	r25, 0x0F	; 15
  9a:	98 bb       	out	0x18, r25	; 24
  PORTB |= (cmd&0xF0);
  9c:	28 b3       	in	r18, 0x18	; 24
  9e:	98 2f       	mov	r25, r24
  a0:	90 7f       	andi	r25, 0xF0	; 240
  a2:	92 2b       	or	r25, r18
  a4:	98 bb       	out	0x18, r25	; 24
  
  // Update LCD
  // Make transition from High to Low
  PORTB = PORTB | (1<<2);
  a6:	c2 9a       	sbi	0x18, 2	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a8:	2a ef       	ldi	r18, 0xFA	; 250
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	f9 01       	movw	r30, r18
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <LCD_Send_Command+0x1c>
  _delay_ms(1);
  PORTB = PORTB & (~(1<<2));
  b2:	c2 98       	cbi	0x18, 2	; 24
  
  // Put CMD on PORT
  PORTB &= 0x0F;  // Make Data Nibble as 0000
  b4:	98 b3       	in	r25, 0x18	; 24
  b6:	9f 70       	andi	r25, 0x0F	; 15
  b8:	98 bb       	out	0x18, r25	; 24
  PORTB |= ((cmd<<4)&0xF0);
  ba:	98 b3       	in	r25, 0x18	; 24
  bc:	82 95       	swap	r24
  be:	80 7f       	andi	r24, 0xF0	; 240
  c0:	98 2b       	or	r25, r24
  c2:	98 bb       	out	0x18, r25	; 24
  
  // Update LCD
  // Make transition from High to Low
  PORTB = PORTB | (1<<2);
  c4:	c2 9a       	sbi	0x18, 2	; 24
  c6:	c9 01       	movw	r24, r18
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LCD_Send_Command+0x36>
  _delay_ms(1);
  PORTB = PORTB & (~(1<<2));
  cc:	c2 98       	cbi	0x18, 2	; 24
  ce:	88 ea       	ldi	r24, 0xA8	; 168
  d0:	91 e6       	ldi	r25, 0x61	; 97
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LCD_Send_Command+0x40>

  // Let LCD Handle
  _delay_ms(100);
}
  d6:	08 95       	ret

000000d8 <LCD_Send_Data>:

// Send Data to LCD
void LCD_Send_Data(unsigned char data)
{
  // Make RS as Data
  PORTB = PORTB | (1<<0);
  d8:	c0 9a       	sbi	0x18, 0	; 24
  // Make It Write
  PORTB = PORTB & (~(1<<1));
  da:	c1 98       	cbi	0x18, 1	; 24
  
  // Put CMD on PORT
  PORTB &= 0x0F;  // Make Data Nibble as 0000
  dc:	98 b3       	in	r25, 0x18	; 24
  de:	9f 70       	andi	r25, 0x0F	; 15
  e0:	98 bb       	out	0x18, r25	; 24
  PORTB |= (data&0xF0);
  e2:	28 b3       	in	r18, 0x18	; 24
  e4:	98 2f       	mov	r25, r24
  e6:	90 7f       	andi	r25, 0xF0	; 240
  e8:	92 2b       	or	r25, r18
  ea:	98 bb       	out	0x18, r25	; 24
  
  // Update LCD
  // Make transition from High to Low
  PORTB = PORTB | (1<<2);
  ec:	c2 9a       	sbi	0x18, 2	; 24
  ee:	2a ef       	ldi	r18, 0xFA	; 250
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	f9 01       	movw	r30, r18
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_Send_Data+0x1c>
  _delay_ms(1);
  PORTB = PORTB & (~(1<<2));
  f8:	c2 98       	cbi	0x18, 2	; 24
  
  //wait_LCD();
  
  // Put CMD on PORT
  PORTB &= 0x0F;  // Make Data Nibble as 0000
  fa:	98 b3       	in	r25, 0x18	; 24
  fc:	9f 70       	andi	r25, 0x0F	; 15
  fe:	98 bb       	out	0x18, r25	; 24
  PORTB |= ((data<<4)&0xF0);
 100:	98 b3       	in	r25, 0x18	; 24
 102:	82 95       	swap	r24
 104:	80 7f       	andi	r24, 0xF0	; 240
 106:	98 2b       	or	r25, r24
 108:	98 bb       	out	0x18, r25	; 24
  
  // Update LCD
  // Make transition from High to Low
  PORTB = PORTB | (1<<2);
 10a:	c2 9a       	sbi	0x18, 2	; 24
 10c:	c9 01       	movw	r24, r18
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <LCD_Send_Data+0x36>
  _delay_ms(1);
  PORTB = PORTB & (~(1<<2));
 112:	c2 98       	cbi	0x18, 2	; 24
 114:	88 ea       	ldi	r24, 0xA8	; 168
 116:	91 e6       	ldi	r25, 0x61	; 97
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <LCD_Send_Data+0x40>

  // Let LCD Handle
  _delay_ms(100);
}
 11c:	08 95       	ret

0000011e <Init_LCD>:
 11e:	88 e8       	ldi	r24, 0x88	; 136
 120:	93 e1       	ldi	r25, 0x13	; 19
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <Init_LCD+0x4>
    _delay_ms(20);
    // Init HW Ports
    // Data Port
    // Port A initialization
    // Make it all OutPut -> 0  
    PORTB=0x00;
 126:	18 ba       	out	0x18, r1	; 24
    DDRB=0xFF;     
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	87 bb       	out	0x17, r24	; 23
      
    ///////// Special Sequence /////// 
    // Set LCD as 4 Bits
    // Set RS -> 0 Command
    // Make RS as Command
  	PORTB = PORTB & (~(1<<0));
 12c:	c0 98       	cbi	0x18, 0	; 24
  	// Make It Write
  	PORTB = PORTB & (~(1<<1));
 12e:	c1 98       	cbi	0x18, 1	; 24
    
    // Write Command to be 4 Bits Mode
    PORTB &= 0x0F;
 130:	88 b3       	in	r24, 0x18	; 24
 132:	8f 70       	andi	r24, 0x0F	; 15
 134:	88 bb       	out	0x18, r24	; 24
    PORTB |= 0x30; 
 136:	88 b3       	in	r24, 0x18	; 24
 138:	80 63       	ori	r24, 0x30	; 48
 13a:	88 bb       	out	0x18, r24	; 24
    
    // Update LCD
    // Make transition from High to Low
  	PORTB = PORTB | (1<<2);
 13c:	c2 9a       	sbi	0x18, 2	; 24
 13e:	2a ef       	ldi	r18, 0xFA	; 250
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	c9 01       	movw	r24, r18
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <Init_LCD+0x26>
  	_delay_ms(1);
  	PORTB = PORTB & (~(1<<2));
 148:	c2 98       	cbi	0x18, 2	; 24
 14a:	82 ee       	ldi	r24, 0xE2	; 226
 14c:	94 e0       	ldi	r25, 0x04	; 4
 14e:	fc 01       	movw	r30, r24
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <Init_LCD+0x32>

    _delay_ms(5);
    
    // Update LCD
    // Make transition from High to Low
  	PORTB = PORTB | (1<<2);
 154:	c2 9a       	sbi	0x18, 2	; 24
 156:	f9 01       	movw	r30, r18
 158:	31 97       	sbiw	r30, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <Init_LCD+0x3a>
  	_delay_ms(1);
  	PORTB = PORTB & (~(1<<2));
 15c:	c2 98       	cbi	0x18, 2	; 24
 15e:	e8 ea       	ldi	r30, 0xA8	; 168
 160:	f1 e6       	ldi	r31, 0x61	; 97
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <Init_LCD+0x44>
    
    _delay_ms(100);
    
    // Update LCD
    // Make transition from High to Low
    PORTB = PORTB | (1<<2);
 166:	c2 9a       	sbi	0x18, 2	; 24
 168:	f9 01       	movw	r30, r18
 16a:	31 97       	sbiw	r30, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <Init_LCD+0x4c>
  	_delay_ms(1);
  	PORTB = PORTB & (~(1<<2));
 16e:	c2 98       	cbi	0x18, 2	; 24
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <Init_LCD+0x52>
    /////////////////////////////////
    
    // Set LCD as 4 Bits
    // Set RS -> 0 Command
    // Make RS as Command
  	PORTB = PORTB & (~(1<<0));
 174:	c0 98       	cbi	0x18, 0	; 24
  	// Make It Write
  	PORTB = PORTB & (~(1<<1));
 176:	c1 98       	cbi	0x18, 1	; 24
    
    // Write Command to be 4 Bits Mode
    PORTB &= 0x0F;
 178:	88 b3       	in	r24, 0x18	; 24
 17a:	8f 70       	andi	r24, 0x0F	; 15
 17c:	88 bb       	out	0x18, r24	; 24
    PORTB |= 0x20; 
 17e:	c5 9a       	sbi	0x18, 5	; 24
    
    // Update LCD
    // Make transition from High to Low
    PORTB = PORTB | (1<<2);
 180:	c2 9a       	sbi	0x18, 2	; 24
 182:	c9 01       	movw	r24, r18
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <Init_LCD+0x66>
  	_delay_ms(1);
  	PORTB = PORTB & (~(1<<2));          
 188:	c2 98       	cbi	0x18, 2	; 24
    
    // 2 Lines
    LCD_Send_Command(0x28);
 18a:	88 e2       	ldi	r24, 0x28	; 40
 18c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Send_Command>
    // LCD On
    LCD_Send_Command(0x0C);
 190:	8c e0       	ldi	r24, 0x0C	; 12
 192:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Send_Command>
}
 196:	08 95       	ret

00000198 <LCD_GotoXY>:

void LCD_GotoXY(unsigned char X, unsigned char Y)
{
    if(Y==0)
 198:	66 23       	and	r22, r22
 19a:	11 f4       	brne	.+4      	; 0x1a0 <LCD_GotoXY+0x8>
    {
       LCD_Send_Command(0x80+X);
 19c:	80 58       	subi	r24, 0x80	; 128
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <LCD_GotoXY+0xa>
    }
    else
    {
        LCD_Send_Command(0x80 + X + 0x40);
 1a0:	80 54       	subi	r24, 0x40	; 64
 1a2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Send_Command>
 1a6:	08 95       	ret

000001a8 <LCD_Clear>:
}

void LCD_Clear(void)
{
	// Send Clr command to LCD
	LCD_Send_Command(0x01);
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Send_Command>
}
 1ae:	08 95       	ret

000001b0 <LCD_SendString>:

void LCD_SendString(char *str)
{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	ec 01       	movw	r28, r24
 1b6:	03 c0       	rjmp	.+6      	; 0x1be <LCD_SendString+0xe>
	while(*str != '\0')
	{
		LCD_Send_Data(*str);
 1b8:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_Send_Data>
		str++;
 1bc:	21 96       	adiw	r28, 0x01	; 1
	LCD_Send_Command(0x01);
}

void LCD_SendString(char *str)
{
	while(*str != '\0')
 1be:	88 81       	ld	r24, Y
 1c0:	88 23       	and	r24, r24
 1c2:	d1 f7       	brne	.-12     	; 0x1b8 <LCD_SendString+0x8>
	{
		LCD_Send_Data(*str);
		str++;
	}
}
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <LCD_SendString_XY>:

void LCD_SendString_XY(char *str, unsigned char x, unsigned char y)
{
 1ca:	0f 93       	push	r16
 1cc:	1f 93       	push	r17
 1ce:	8c 01       	movw	r16, r24
 1d0:	86 2f       	mov	r24, r22
	LCD_GotoXY(x, y);
 1d2:	64 2f       	mov	r22, r20
 1d4:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_GotoXY>
	LCD_SendString(str);
 1d8:	c8 01       	movw	r24, r16
 1da:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_SendString>
}
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	08 95       	ret

000001e4 <main>:

int main(void)
{
    // Init LCD
    Init_LCD();
 1e4:	0e 94 8f 00 	call	0x11e	; 0x11e <Init_LCD>
     
    LCD_GotoXY(0,0);
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_GotoXY>
    // Disp Char M
    LCD_Send_Data('M');
 1f0:	8d e4       	ldi	r24, 0x4D	; 77
 1f2:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_Send_Data>
    LCD_GotoXY(10,0);
 1f6:	8a e0       	ldi	r24, 0x0A	; 10
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_GotoXY>
    // Disp Char M
    LCD_Send_Data('M');
 1fe:	8d e4       	ldi	r24, 0x4D	; 77
 200:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_Send_Data>
    LCD_GotoXY(0,1);
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	61 e0       	ldi	r22, 0x01	; 1
 208:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_GotoXY>
    // Disp Char M
    LCD_Send_Data('M');
 20c:	8d e4       	ldi	r24, 0x4D	; 77
 20e:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_Send_Data>
    LCD_GotoXY(10,1);
 212:	8a e0       	ldi	r24, 0x0A	; 10
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_GotoXY>
    // Disp Char M
    LCD_Send_Data('M');
 21a:	8d e4       	ldi	r24, 0x4D	; 77
 21c:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_Send_Data>
 220:	ff cf       	rjmp	.-2      	; 0x220 <main+0x3c>

00000222 <_exit>:
 222:	f8 94       	cli

00000224 <__stop_program>:
 224:	ff cf       	rjmp	.-2      	; 0x224 <__stop_program>
