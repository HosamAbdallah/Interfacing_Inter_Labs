
my_i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000060  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000db  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000331  00000000  00000000  000003ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001e6  00000000  00000000  000006de  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000439  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000e0  00000000  00000000  00000d00  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000192  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000ec  00000000  00000000  00000f72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 0d 01 	jmp	0x21a	; 0x21a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <util/delay.h>
#include "my_eeprom.h"


int main(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	0f 92       	push	r0
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
	unsigned char val = 0;
  9c:	19 82       	std	Y+1, r1	; 0x01
	DDRA = 0xFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
  a2:	1b ba       	out	0x1b, r1	; 27

	// Init EEPROM
	EEPROM_Init();
  a4:	0e 94 0a 01 	call	0x214	; 0x214 <EEPROM_Init>

	EEPROM_WriteByte(0x0311, 0x55);
  a8:	81 e1       	ldi	r24, 0x11	; 17
  aa:	93 e0       	ldi	r25, 0x03	; 3
  ac:	65 e5       	ldi	r22, 0x55	; 85
  ae:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <EEPROM_WriteByte>
  b2:	80 e1       	ldi	r24, 0x10	; 16
  b4:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b6:	28 ec       	ldi	r18, 0xC8	; 200
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	f9 01       	movw	r30, r18
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c2:	d9 f7       	brne	.-10     	; 0xba <main+0x28>
	_delay_ms(1000);
	EEPROM_ReadByte(0x0311, &val);
  c4:	81 e1       	ldi	r24, 0x11	; 17
  c6:	93 e0       	ldi	r25, 0x03	; 3
  c8:	be 01       	movw	r22, r28
  ca:	6f 5f       	subi	r22, 0xFF	; 255
  cc:	7f 4f       	sbci	r23, 0xFF	; 255
  ce:	0e 94 94 00 	call	0x128	; 0x128 <EEPROM_ReadByte>
	while(1)
	{
		PORTA = val;
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	8b bb       	out	0x1b, r24	; 27
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <main+0x42>

000000d8 <I2C_Init>:

void I2C_Init(void)
{
    // TWI initialization
    // Bit Rate: 400.000 kHz
    TWBR=0x02;
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	80 b9       	out	0x00, r24	; 0
    // Two Wire Bus Slave Address: 0x1
    // General Call Recognition: Off
    TWAR=0x02;
  dc:	82 b9       	out	0x02, r24	; 2
    // Generate Acknowledge Pulse: On
    // TWI Interrupt: Off
    TWCR=0x44;
  de:	84 e4       	ldi	r24, 0x44	; 68
  e0:	86 bf       	out	0x36, r24	; 54
    TWSR=0x00;
  e2:	11 b8       	out	0x01, r1	; 1
}
  e4:	08 95       	ret

000000e6 <TWIStart>:

void TWIStart(void)
{
    // Send Start Condition
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
  e6:	84 ea       	ldi	r24, 0xA4	; 164
  e8:	86 bf       	out	0x36, r24	; 54
    
    // Wait for TWINT flag set in TWCR Register 
    while (!(TWCR & (1 << TWINT)));
  ea:	06 b6       	in	r0, 0x36	; 54
  ec:	07 fe       	sbrs	r0, 7
  ee:	fd cf       	rjmp	.-6      	; 0xea <TWIStart+0x4>
}
  f0:	08 95       	ret

000000f2 <TWIStop>:

void TWIStop(void)
{
    // Send Stop Condition
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
  f2:	84 e9       	ldi	r24, 0x94	; 148
  f4:	86 bf       	out	0x36, r24	; 54
}
  f6:	08 95       	ret

000000f8 <TWIWrite>:

void TWIWrite(unsigned char data)
{
    // Put data On TWI Register
    TWDR = data;
  f8:	83 b9       	out	0x03, r24	; 3
    // Send Data 
    TWCR = (1 << TWINT) | (1 << TWEN);
  fa:	84 e8       	ldi	r24, 0x84	; 132
  fc:	86 bf       	out	0x36, r24	; 54
    // Wait for TWINT flag set in TWCR Register 
    while (!(TWCR & (1 << TWINT)));
  fe:	06 b6       	in	r0, 0x36	; 54
 100:	07 fe       	sbrs	r0, 7
 102:	fd cf       	rjmp	.-6      	; 0xfe <TWIWrite+0x6>
}
 104:	08 95       	ret

00000106 <TWIReadACK>:


unsigned char TWIReadACK(void)
{
    TWCR = (1 << TWINT) | (1 << TWEN) | (1<<TWEA);
 106:	84 ec       	ldi	r24, 0xC4	; 196
 108:	86 bf       	out	0x36, r24	; 54
    // Wait for TWINT flag set in TWCR Register 
    while (!(TWCR & (1 << TWINT)));
 10a:	06 b6       	in	r0, 0x36	; 54
 10c:	07 fe       	sbrs	r0, 7
 10e:	fd cf       	rjmp	.-6      	; 0x10a <TWIReadACK+0x4>
    // Read Data
    return TWDR;
 110:	83 b1       	in	r24, 0x03	; 3
}
 112:	08 95       	ret

00000114 <TWIReadNACK>:

unsigned char TWIReadNACK(void)
{
    TWCR = (1 << TWINT) | (1 << TWEN);
 114:	84 e8       	ldi	r24, 0x84	; 132
 116:	86 bf       	out	0x36, r24	; 54
    // Wait for TWINT flag set in TWCR Register 
    while (!(TWCR & (1 << TWINT)));
 118:	06 b6       	in	r0, 0x36	; 54
 11a:	07 fe       	sbrs	r0, 7
 11c:	fd cf       	rjmp	.-6      	; 0x118 <TWIReadNACK+0x4>
    // Read Data
    return TWDR;
 11e:	83 b1       	in	r24, 0x03	; 3
}
 120:	08 95       	ret

00000122 <TWIGetStatus>:

unsigned char TWIGetStatus(void)
{
    unsigned char status;
    status = TWSR & 0xF8;
 122:	81 b1       	in	r24, 0x01	; 1
    return status;
}
 124:	88 7f       	andi	r24, 0xF8	; 248
 126:	08 95       	ret

00000128 <EEPROM_ReadByte>:
    // Return Done
    return 1;
}

unsigned char EEPROM_ReadByte(unsigned int addr, unsigned char *data)
{
 128:	ef 92       	push	r14
 12a:	ff 92       	push	r15
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ec 01       	movw	r28, r24
 134:	7b 01       	movw	r14, r22
	unsigned char state = 0;
    unsigned char _3MSBAddr = 0;
    
    // Start TWI
    TWIStart();
 136:	0e 94 73 00 	call	0xe6	; 0xe6 <TWIStart>
    // Get State
    state = TWIGetStatus();
 13a:	0e 94 91 00 	call	0x122	; 0x122 <TWIGetStatus>
    // Check if TWI Start
    if(state != TW_START)
 13e:	88 30       	cpi	r24, 0x08	; 8
 140:	89 f5       	brne	.+98     	; 0x1a4 <EEPROM_ReadByte+0x7c>
    // Send Slave Address -> For EEPROM 24cXX
    // The Slave Address of Chip is 0b1010, so have Three bits free
    // We can take a part from 11 bit address and send it with Device Add
    // Send 3 MSBs From Address "As Device Address"  
    // Set Action to write -> 0
    _3MSBAddr = ((unsigned char) ((addr&0x0700)>>7)); 
 142:	ce 01       	movw	r24, r28
 144:	88 0f       	add	r24, r24
 146:	89 2f       	mov	r24, r25
 148:	88 1f       	adc	r24, r24
 14a:	99 0b       	sbc	r25, r25
 14c:	91 95       	neg	r25
 14e:	18 2f       	mov	r17, r24
 150:	1e 70       	andi	r17, 0x0E	; 14
    TWIWrite(0xA0|_3MSBAddr); 
 152:	81 2f       	mov	r24, r17
 154:	80 6a       	ori	r24, 0xA0	; 160
 156:	0e 94 7c 00 	call	0xf8	; 0xf8 <TWIWrite>
    // Get Status
    state = TWIGetStatus();
 15a:	0e 94 91 00 	call	0x122	; 0x122 <TWIGetStatus>
    // Check if it is TW_MT_SLA_ACK
    if(state != TW_MT_SLA_ACK)
 15e:	88 31       	cpi	r24, 0x18	; 24
 160:	09 f5       	brne	.+66     	; 0x1a4 <EEPROM_ReadByte+0x7c>
        return 0;
    
    // Write the Rest of Location Address(8 Bits)    
    TWIWrite((unsigned char) addr);
 162:	8c 2f       	mov	r24, r28
 164:	0e 94 7c 00 	call	0xf8	; 0xf8 <TWIWrite>
    // Get State
    state = TWIGetStatus(); 
 168:	0e 94 91 00 	call	0x122	; 0x122 <TWIGetStatus>
    // check if it is TW_MT_DATA_ACK
    if(state != TW_MT_DATA_ACK)
 16c:	88 32       	cpi	r24, 0x28	; 40
 16e:	d1 f4       	brne	.+52     	; 0x1a4 <EEPROM_ReadByte+0x7c>
    
    // Now The Master Will Be Master Reciever
    
    // Now we need to Send Start Bit Again 
    // Start TWI
    TWIStart();
 170:	0e 94 73 00 	call	0xe6	; 0xe6 <TWIStart>
    // Get State
    state = TWIGetStatus();
 174:	0e 94 91 00 	call	0x122	; 0x122 <TWIGetStatus>
    // Check if TW_REP_START
    if(state != TW_REP_START)
 178:	80 31       	cpi	r24, 0x10	; 16
 17a:	a1 f4       	brne	.+40     	; 0x1a4 <EEPROM_ReadByte+0x7c>
    // The Slave Address of Chip is 0b1010, so have Three bits free
    // We can take a part from 11 bit address and send it with Device Add
    // Send 3 MSBs From Address "As Device Address"  
    // Set Action to Read -> 1
    _3MSBAddr = ((unsigned char) ((addr&0x0700)>>7)); 
    TWIWrite(0xA0|_3MSBAddr|1); 
 17c:	81 2f       	mov	r24, r17
 17e:	81 6a       	ori	r24, 0xA1	; 161
 180:	0e 94 7c 00 	call	0xf8	; 0xf8 <TWIWrite>
    // Get Status
    state = TWIGetStatus();
 184:	0e 94 91 00 	call	0x122	; 0x122 <TWIGetStatus>
    // Check if it is TW_MR_SLA_ACK
    if(state != TW_MR_SLA_ACK)
 188:	80 34       	cpi	r24, 0x40	; 64
 18a:	61 f4       	brne	.+24     	; 0x1a4 <EEPROM_ReadByte+0x7c>
        return 0; 
    
    // Read Data
    *data =  TWIReadNACK();
 18c:	0e 94 8a 00 	call	0x114	; 0x114 <TWIReadNACK>
 190:	f7 01       	movw	r30, r14
 192:	80 83       	st	Z, r24
    // Get Status
    state = TWIGetStatus();
 194:	0e 94 91 00 	call	0x122	; 0x122 <TWIGetStatus>
    // Check if it is 
    if(state != TW_MR_DATA_NACK)
 198:	88 35       	cpi	r24, 0x58	; 88
 19a:	21 f4       	brne	.+8      	; 0x1a4 <EEPROM_ReadByte+0x7c>
        return 0;
    
   // TWI Stop 
   TWIStop(); 
 19c:	0e 94 79 00 	call	0xf2	; 0xf2 <TWIStop>
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <EEPROM_ReadByte+0x7e>
   // Return Done
   return 1; 
 1a4:	80 e0       	ldi	r24, 0x00	; 0
}
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	ff 90       	pop	r15
 1ae:	ef 90       	pop	r14
 1b0:	08 95       	ret

000001b2 <EEPROM_WriteByte>:
{
	I2C_Init();
}

unsigned char EEPROM_WriteByte(unsigned int addr, unsigned char data)
{
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	ec 01       	movw	r28, r24
 1ba:	16 2f       	mov	r17, r22
	unsigned char state = 0;
    unsigned char _3MSBAddr = 0;
    
    // Start TWI
    TWIStart();
 1bc:	0e 94 73 00 	call	0xe6	; 0xe6 <TWIStart>
    // Get State
    state = TWIGetStatus();
 1c0:	0e 94 91 00 	call	0x122	; 0x122 <TWIGetStatus>
    // Check if TWI Start
    if(state != TW_START)
 1c4:	88 30       	cpi	r24, 0x08	; 8
 1c6:	09 f5       	brne	.+66     	; 0x20a <EEPROM_WriteByte+0x58>
    // The Slave Address of Chip is 0b1010, so have Three bits free
    // We can take a part from 11 bit address and send it with Device Add
    // Send 3 MSBs From Address "As Device Address" 
    // Set Action To Write -> 0
    _3MSBAddr = ((unsigned char) ((addr&0x0700)>>7)); 
    TWIWrite(0xA0|_3MSBAddr); 
 1c8:	ce 01       	movw	r24, r28
 1ca:	80 70       	andi	r24, 0x00	; 0
 1cc:	97 70       	andi	r25, 0x07	; 7
 1ce:	88 0f       	add	r24, r24
 1d0:	89 2f       	mov	r24, r25
 1d2:	88 1f       	adc	r24, r24
 1d4:	99 0b       	sbc	r25, r25
 1d6:	91 95       	neg	r25
 1d8:	80 6a       	ori	r24, 0xA0	; 160
 1da:	0e 94 7c 00 	call	0xf8	; 0xf8 <TWIWrite>
    // Get Status
    state = TWIGetStatus();
 1de:	0e 94 91 00 	call	0x122	; 0x122 <TWIGetStatus>
    // Check if it is TW_MT_SLA_ACK
    if(state != TW_MT_SLA_ACK)
 1e2:	88 31       	cpi	r24, 0x18	; 24
 1e4:	91 f4       	brne	.+36     	; 0x20a <EEPROM_WriteByte+0x58>
        return 0;
    
    // Write the Rest of Location Address(8 Bits)    
    TWIWrite((unsigned char) addr);
 1e6:	8c 2f       	mov	r24, r28
 1e8:	0e 94 7c 00 	call	0xf8	; 0xf8 <TWIWrite>
    // Get State
    state = TWIGetStatus(); 
 1ec:	0e 94 91 00 	call	0x122	; 0x122 <TWIGetStatus>
    // check if it is TW_MT_DATA_ACK
    if(state != TW_MT_DATA_ACK)
 1f0:	88 32       	cpi	r24, 0x28	; 40
 1f2:	59 f4       	brne	.+22     	; 0x20a <EEPROM_WriteByte+0x58>
        return 0;
    
    // Send Data
    TWIWrite(data);
 1f4:	81 2f       	mov	r24, r17
 1f6:	0e 94 7c 00 	call	0xf8	; 0xf8 <TWIWrite>
    // Get Status
    state = TWIGetStatus();
 1fa:	0e 94 91 00 	call	0x122	; 0x122 <TWIGetStatus>
    // Check if it is TW_MT_DATA_ACK
    if(state != TW_MT_DATA_ACK)
 1fe:	88 32       	cpi	r24, 0x28	; 40
 200:	21 f4       	brne	.+8      	; 0x20a <EEPROM_WriteByte+0x58>
        return 0;
    
    // TWI Stop 
    TWIStop(); 
 202:	0e 94 79 00 	call	0xf2	; 0xf2 <TWIStop>
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	01 c0       	rjmp	.+2      	; 0x20c <EEPROM_WriteByte+0x5a>
    // Return Done
    return 1;
 20a:	80 e0       	ldi	r24, 0x00	; 0
}
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	1f 91       	pop	r17
 212:	08 95       	ret

00000214 <EEPROM_Init>:
#include "my_i2c_module.h"

void EEPROM_Init(void)
{
	I2C_Init();
 214:	0e 94 6c 00 	call	0xd8	; 0xd8 <I2C_Init>
}
 218:	08 95       	ret

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
