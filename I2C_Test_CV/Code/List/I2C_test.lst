
AVRASM ver. 2.1.30  C:\Documents and Settings\Administrator\Desktop\I2C_Test\Code\List\I2C_test.asm Fri Sep 21 02:41:00 2012

                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega32
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 512 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2143
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 002a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 __RESET:
00002a 94f8      	CLI
00002b 27ee      	CLR  R30
00002c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00002d e0f1      	LDI  R31,1
00002e bffb      	OUT  GICR,R31
00002f bfeb      	OUT  GICR,R30
000030 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000031 e1f8      	LDI  R31,0x18
000032 bdf1      	OUT  WDTCR,R31
000033 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000034 e08d      	LDI  R24,(14-2)+1
000035 e0a2      	LDI  R26,2
000036 27bb      	CLR  R27
                 __CLEAR_REG:
000037 93ed      	ST   X+,R30
000038 958a      	DEC  R24
000039 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003b e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003c e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003d 93ed      	ST   X+,R30
00003e 9701      	SBIW R24,1
00003f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000040 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000041 bfed      	OUT  SPL,R30
000042 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000043 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000044 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000045 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000046 940c 00ea 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;#define MAX_TRIES 50
                 ;
                 ;#define I2C_START 0
                 ;#define I2C_DATA 1
                 ;#define I2C_STOP 2
                 ;
                 ;#define TW_MT_ARB_LOST   0x38
                 ;#define TW_MR_ARB_LOST   0x38
                 ;#define TW_START         0x08
                 ;#define TW_REP_START     0x10
                 ;#define TW_MT_SLA_ACK    0x18
                 ;#define TW_MT_DATA_ACK   0x28
                 ;#define TW_MR_DATA_NACK  0x58
                 ;#define TW_MR_SLA_NACK   0x48
                 ;#define TW_MT_SLA_NACK   0x20
                 ;#define TW_MT_DATA_NACK  0x30
                 ;#define TW_MR_DATA_ACK   0x50
                 ;#define TW_MR_SLA_ACK    0x40
                 ;
                 ;#define TW_WRITE         0
                 ;#define TW_READ          1
                 ;
                 ;// Init MCU Registers
                 ;void MCU_Init(void)
                 ; 0000 001C {
                 
                 	.CSEG
                 _MCU_Init:
                 ; 0000 001D     // Input/Output Ports initialization
                 ; 0000 001E     // Port A initialization
                 ; 0000 001F     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0020     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0021     PORTA=0x00;
000048 e0e0      	LDI  R30,LOW(0)
000049 bbeb      	OUT  0x1B,R30
                 ; 0000 0022     DDRA=0xFF;
00004a efef      	LDI  R30,LOW(255)
00004b bbea      	OUT  0x1A,R30
                 ; 0000 0023 
                 ; 0000 0024     // Port B initialization
                 ; 0000 0025     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0026     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0027     PORTB=0x00;
00004c e0e0      	LDI  R30,LOW(0)
00004d bbe8      	OUT  0x18,R30
                 ; 0000 0028     DDRB=0x00;
00004e bbe7      	OUT  0x17,R30
                 ; 0000 0029 
                 ; 0000 002A     // Port C initialization
                 ; 0000 002B     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 002C     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 002D     PORTC=0x00;
00004f bbe5      	OUT  0x15,R30
                 ; 0000 002E     DDRC=0x00;
000050 bbe4      	OUT  0x14,R30
                 ; 0000 002F 
                 ; 0000 0030     // Port D initialization
                 ; 0000 0031     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0032     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0033     PORTD=0x00;
000051 bbe2      	OUT  0x12,R30
                 ; 0000 0034     DDRD=0x00;
000052 bbe1      	OUT  0x11,R30
                 ; 0000 0035 
                 ; 0000 0036     // Timer/Counter 0 initialization
                 ; 0000 0037     // Clock source: System Clock
                 ; 0000 0038     // Clock value: Timer 0 Stopped
                 ; 0000 0039     // Mode: Normal top=0xFF
                 ; 0000 003A     // OC0 output: Disconnected
                 ; 0000 003B     TCCR0=0x00;
000053 bfe3      	OUT  0x33,R30
                 ; 0000 003C     TCNT0=0x00;
000054 bfe2      	OUT  0x32,R30
                 ; 0000 003D     OCR0=0x00;
000055 bfec      	OUT  0x3C,R30
                 ; 0000 003E 
                 ; 0000 003F     // Timer/Counter 1 initialization
                 ; 0000 0040     // Clock source: System Clock
                 ; 0000 0041     // Clock value: Timer1 Stopped
                 ; 0000 0042     // Mode: Normal top=0xFFFF
                 ; 0000 0043     // OC1A output: Discon.
                 ; 0000 0044     // OC1B output: Discon.
                 ; 0000 0045     // Noise Canceler: Off
                 ; 0000 0046     // Input Capture on Falling Edge
                 ; 0000 0047     // Timer1 Overflow Interrupt: Off
                 ; 0000 0048     // Input Capture Interrupt: Off
                 ; 0000 0049     // Compare A Match Interrupt: Off
                 ; 0000 004A     // Compare B Match Interrupt: Off
                 ; 0000 004B     TCCR1A=0x00;
000056 bdef      	OUT  0x2F,R30
                 ; 0000 004C     TCCR1B=0x00;
000057 bdee      	OUT  0x2E,R30
                 ; 0000 004D     TCNT1H=0x00;
000058 bded      	OUT  0x2D,R30
                 ; 0000 004E     TCNT1L=0x00;
000059 bdec      	OUT  0x2C,R30
                 ; 0000 004F     ICR1H=0x00;
00005a bde7      	OUT  0x27,R30
                 ; 0000 0050     ICR1L=0x00;
00005b bde6      	OUT  0x26,R30
                 ; 0000 0051     OCR1AH=0x00;
00005c bdeb      	OUT  0x2B,R30
                 ; 0000 0052     OCR1AL=0x00;
00005d bdea      	OUT  0x2A,R30
                 ; 0000 0053     OCR1BH=0x00;
00005e bde9      	OUT  0x29,R30
                 ; 0000 0054     OCR1BL=0x00;
00005f bde8      	OUT  0x28,R30
                 ; 0000 0055 
                 ; 0000 0056     // Timer/Counter 2 initialization
                 ; 0000 0057     // Clock source: System Clock
                 ; 0000 0058     // Clock value: Timer2 Stopped
                 ; 0000 0059     // Mode: Normal top=0xFF
                 ; 0000 005A     // OC2 output: Disconnected
                 ; 0000 005B     ASSR=0x00;
000060 bde2      	OUT  0x22,R30
                 ; 0000 005C     TCCR2=0x00;
000061 bde5      	OUT  0x25,R30
                 ; 0000 005D     TCNT2=0x00;
000062 bde4      	OUT  0x24,R30
                 ; 0000 005E     OCR2=0x00;
000063 bde3      	OUT  0x23,R30
                 ; 0000 005F 
                 ; 0000 0060     // External Interrupt(s) initialization
                 ; 0000 0061     // INT0: Off
                 ; 0000 0062     // INT1: Off
                 ; 0000 0063     // INT2: Off
                 ; 0000 0064     MCUCR=0x00;
000064 bfe5      	OUT  0x35,R30
                 ; 0000 0065     MCUCSR=0x00;
000065 bfe4      	OUT  0x34,R30
                 ; 0000 0066 
                 ; 0000 0067     // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0068     TIMSK=0x00;
000066 bfe9      	OUT  0x39,R30
                 ; 0000 0069 
                 ; 0000 006A     // USART initialization
                 ; 0000 006B     // USART disabled
                 ; 0000 006C     UCSRB=0x00;
000067 b9ea      	OUT  0xA,R30
                 ; 0000 006D 
                 ; 0000 006E     // Analog Comparator initialization
                 ; 0000 006F     // Analog Comparator: Off
                 ; 0000 0070     // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 0071     ACSR=0x80;
000068 e8e0      	LDI  R30,LOW(128)
000069 b9e8      	OUT  0x8,R30
                 ; 0000 0072     SFIOR=0x00;
00006a e0e0      	LDI  R30,LOW(0)
00006b bfe0      	OUT  0x30,R30
                 ; 0000 0073 
                 ; 0000 0074     // ADC initialization
                 ; 0000 0075     // ADC disabled
                 ; 0000 0076     ADCSRA=0x00;
00006c b9e6      	OUT  0x6,R30
                 ; 0000 0077 
                 ; 0000 0078     // SPI initialization
                 ; 0000 0079     // SPI disabled
                 ; 0000 007A     SPCR=0x00;
00006d b9ed      	OUT  0xD,R30
                 ; 0000 007B 
                 ; 0000 007C     // TWI initialization
                 ; 0000 007D     // TWI disabled
                 ; 0000 007E     TWCR=0x00;
00006e c00f      	RJMP _0x2000003
                 ; 0000 007F }
                 ;
                 ;void I2C_Init(void)
                 ; 0000 0082 {
                 _I2C_Init:
                 ; 0000 0083     // TWI initialization
                 ; 0000 0084     // Bit Rate: 400.000 kHz
                 ; 0000 0085     TWBR=0x02;
00006f e0e2      	LDI  R30,LOW(2)
000070 b9e0      	OUT  0x0,R30
                 ; 0000 0086     // Two Wire Bus Slave Address: 0x1
                 ; 0000 0087     // General Call Recognition: Off
                 ; 0000 0088     TWAR=0x02;
000071 b9e2      	OUT  0x2,R30
                 ; 0000 0089     // Generate Acknowledge Pulse: On
                 ; 0000 008A     // TWI Interrupt: Off
                 ; 0000 008B     TWCR=0x44;
000072 e4e4      	LDI  R30,LOW(68)
000073 bfe6      	OUT  0x36,R30
                 ; 0000 008C     TWSR=0x00;
000074 e0e0      	LDI  R30,LOW(0)
000075 b9e1      	OUT  0x1,R30
                 ; 0000 008D }
000076 9508      	RET
                 ;
                 ;void TWIStart(void)
                 ; 0000 0090 {
                 _TWIStart:
                 ; 0000 0091     // Send Start Condition
                 ; 0000 0092     TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
000077 eae4      	LDI  R30,LOW(164)
000078 bfe6      	OUT  0x36,R30
                 ; 0000 0093 
                 ; 0000 0094     // Wait for TWINT flag set in TWCR Register
                 ; 0000 0095     while (!(TWCR & (1 << TWINT)));
                 _0x3:
000079 b7e6      	IN   R30,0x36
00007a 78e0      	ANDI R30,LOW(0x80)
00007b f3e9      	BREQ _0x3
                 ; 0000 0096 }
00007c 9508      	RET
                 ;
                 ;void TWIStop(void)
                 ; 0000 0099 {
                 _TWIStop:
                 ; 0000 009A     // Send Stop Condition
                 ; 0000 009B     TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
00007d e9e4      	LDI  R30,LOW(148)
                 _0x2000003:
00007e bfe6      	OUT  0x36,R30
                 ; 0000 009C }
00007f 9508      	RET
                 ;
                 ;void TWIWrite(unsigned char data)
                 ; 0000 009F {
                 _TWIWrite:
                 ; 0000 00A0     // Put data On TWI Register
                 ; 0000 00A1     TWDR = data;
                 ;	data -> Y+0
000080 81e8      	LD   R30,Y
000081 b9e3      	OUT  0x3,R30
                 ; 0000 00A2     // Send Data
                 ; 0000 00A3     TWCR = (1 << TWINT) | (1 << TWEN);
000082 e8e4      	LDI  R30,LOW(132)
000083 bfe6      	OUT  0x36,R30
                 ; 0000 00A4     // Wait for TWINT flag set in TWCR Register
                 ; 0000 00A5     while (!(TWCR & (1 << TWINT)));
                 _0x6:
000084 b7e6      	IN   R30,0x36
000085 78e0      	ANDI R30,LOW(0x80)
000086 f3e9      	BREQ _0x6
                 ; 0000 00A6 }
000087 9621      	ADIW R28,1
000088 9508      	RET
                 ;
                 ;
                 ;unsigned char TWIReadACK(void)
                 ; 0000 00AA {
                 ; 0000 00AB     TWCR = (1 << TWINT) | (1 << TWEN) | (1<<TWEA);
                 ; 0000 00AC     // Wait for TWINT flag set in TWCR Register
                 ; 0000 00AD     while (!(TWCR & (1 << TWINT)));
                 ; 0000 00AE     // Read Data
                 ; 0000 00AF     return TWDR;
                 ; 0000 00B0 }
                 ;
                 ;unsigned char TWIReadNACK(void)
                 ; 0000 00B3 {
                 _TWIReadNACK:
                 ; 0000 00B4     TWCR = (1 << TWINT) | (1 << TWEN);
000089 e8e4      	LDI  R30,LOW(132)
00008a bfe6      	OUT  0x36,R30
                 ; 0000 00B5     // Wait for TWINT flag set in TWCR Register
                 ; 0000 00B6     while (!(TWCR & (1 << TWINT)));
                 _0xC:
00008b b7e6      	IN   R30,0x36
00008c 78e0      	ANDI R30,LOW(0x80)
00008d f3e9      	BREQ _0xC
                 ; 0000 00B7     // Read Data
                 ; 0000 00B8     return TWDR;
00008e b1e3      	IN   R30,0x3
00008f 9508      	RET
                 ; 0000 00B9 }
                 ;
                 ;unsigned char TWIGetStatus(void)
                 ; 0000 00BC {
                 _TWIGetStatus:
                 ; 0000 00BD     unsigned char status;
                 ; 0000 00BE     status = TWSR & 0xF8;
000090 931a      	ST   -Y,R17
                 ;	status -> R17
000091 b1e1      	IN   R30,0x1
000092 7fe8      	ANDI R30,LOW(0xF8)
000093 2f1e      	MOV  R17,R30
                 ; 0000 00BF     return status;
000094 2fe1      	MOV  R30,R17
000095 9119      	LD   R17,Y+
000096 9508      	RET
                 ; 0000 00C0 }
                 ;
                 ;unsigned char EEPROM_WriteByte(unsigned int addr, unsigned char data)
                 ; 0000 00C3 {
                 _EEPROM_WriteByte:
                 ; 0000 00C4     unsigned char state = 0;
                 ; 0000 00C5     unsigned char _3MSBAddr = 0;
                 ; 0000 00C6 
                 ; 0000 00C7     // Start TWI
                 ; 0000 00C8     TWIStart();
000097 d070      	RCALL SUBOPT_0x0
                 ;	addr -> Y+3
                 ;	data -> Y+2
                 ;	state -> R17
                 ;	_3MSBAddr -> R16
                 ; 0000 00C9     // Get State
                 ; 0000 00CA     state = TWIGetStatus();
                 ; 0000 00CB     // Check if TWI Start
                 ; 0000 00CC     if(state != TW_START)
000098 f011      	BREQ _0xF
                 ; 0000 00CD         return 0;
000099 e0e0      	LDI  R30,LOW(0)
00009a c012      	RJMP _0x2000002
                 ; 0000 00CE 
                 ; 0000 00CF     // Send Slave Address -> For EEPROM 24cXX
                 ; 0000 00D0     // The Slave Address of Chip is 0b1010, so have Three bits free
                 ; 0000 00D1     // We can take a part from 11 bit address and send it with Device Add
                 ; 0000 00D2     // Send 3 MSBs From Address "As Device Address"
                 ; 0000 00D3     // Set Action To Write -> 0
                 ; 0000 00D4     _3MSBAddr = ((unsigned char) ((addr&0x0700)>>7));
                 _0xF:
00009b 81eb      	LDD  R30,Y+3
00009c 81fc      	LDD  R31,Y+3+1
00009d d073      	RCALL SUBOPT_0x1
                 ; 0000 00D5     TWIWrite(0xA0|_3MSBAddr);
                 ; 0000 00D6     // Get Status
                 ; 0000 00D7     state = TWIGetStatus();
                 ; 0000 00D8     // Check if it is TW_MT_SLA_ACK
                 ; 0000 00D9     if(state != TW_MT_SLA_ACK)
00009e f011      	BREQ _0x10
                 ; 0000 00DA         return 0;
00009f e0e0      	LDI  R30,LOW(0)
0000a0 c00c      	RJMP _0x2000002
                 ; 0000 00DB 
                 ; 0000 00DC     // Write the Rest of Location Address(8 Bits)
                 ; 0000 00DD     TWIWrite((unsigned char) addr);
                 _0x10:
0000a1 81eb      	LDD  R30,Y+3
0000a2 d07d      	RCALL SUBOPT_0x2
                 ; 0000 00DE     // Get State
                 ; 0000 00DF     state = TWIGetStatus();
                 ; 0000 00E0     // check if it is TW_MT_DATA_ACK
                 ; 0000 00E1     if(state != TW_MT_DATA_ACK)
0000a3 f011      	BREQ _0x11
                 ; 0000 00E2         return 0;
0000a4 e0e0      	LDI  R30,LOW(0)
0000a5 c007      	RJMP _0x2000002
                 ; 0000 00E3 
                 ; 0000 00E4     // Send Data
                 ; 0000 00E5     TWIWrite(data);
                 _0x11:
0000a6 81ea      	LDD  R30,Y+2
0000a7 d078      	RCALL SUBOPT_0x2
                 ; 0000 00E6     // Get Status
                 ; 0000 00E7     state = TWIGetStatus();
                 ; 0000 00E8     // Check if it is TW_MT_DATA_ACK
                 ; 0000 00E9     if(state != TW_MT_DATA_ACK)
0000a8 f011      	BREQ _0x12
                 ; 0000 00EA         return 0;
0000a9 e0e0      	LDI  R30,LOW(0)
0000aa c002      	RJMP _0x2000002
                 ; 0000 00EB 
                 ; 0000 00EC     // TWI Stop
                 ; 0000 00ED     TWIStop();
                 _0x12:
0000ab dfd1      	RCALL _TWIStop
                 ; 0000 00EE     // Return Done
                 ; 0000 00EF     return 1;
0000ac e0e1      	LDI  R30,LOW(1)
                 _0x2000002:
0000ad 8119      	LDD  R17,Y+1
0000ae 8108      	LDD  R16,Y+0
0000af 9625      	ADIW R28,5
0000b0 9508      	RET
                 ; 0000 00F0 }
                 ;
                 ;
                 ;unsigned char EEPROM_ReadByte(unsigned int addr, unsigned char *data)
                 ; 0000 00F4 {
                 _EEPROM_ReadByte:
                 ; 0000 00F5     unsigned char state = 0;
                 ; 0000 00F6     unsigned char _3MSBAddr = 0;
                 ; 0000 00F7 
                 ; 0000 00F8     // Start TWI
                 ; 0000 00F9     TWIStart();
0000b1 d056      	RCALL SUBOPT_0x0
                 ;	addr -> Y+4
                 ;	*data -> Y+2
                 ;	state -> R17
                 ;	_3MSBAddr -> R16
                 ; 0000 00FA     // Get State
                 ; 0000 00FB     state = TWIGetStatus();
                 ; 0000 00FC     // Check if TWI Start
                 ; 0000 00FD     if(state != TW_START)
0000b2 f011      	BREQ _0x13
                 ; 0000 00FE         return 0;
0000b3 e0e0      	LDI  R30,LOW(0)
0000b4 c031      	RJMP _0x2000001
                 ; 0000 00FF 
                 ; 0000 0100     // Send Slave Address -> For EEPROM 24cXX
                 ; 0000 0101     // The Slave Address of Chip is 0b1010, so have Three bits free
                 ; 0000 0102     // We can take a part from 11 bit address and send it with Device Add
                 ; 0000 0103     // Send 3 MSBs From Address "As Device Address"
                 ; 0000 0104     // Set Action to write -> 0
                 ; 0000 0105     _3MSBAddr = ((unsigned char) ((addr&0x0700)>>7));
                 _0x13:
0000b5 81ec      	LDD  R30,Y+4
0000b6 81fd      	LDD  R31,Y+4+1
0000b7 d059      	RCALL SUBOPT_0x1
                 ; 0000 0106     TWIWrite(0xA0|_3MSBAddr);
                 ; 0000 0107     // Get Status
                 ; 0000 0108     state = TWIGetStatus();
                 ; 0000 0109     // Check if it is TW_MT_SLA_ACK
                 ; 0000 010A     if(state != TW_MT_SLA_ACK)
0000b8 f011      	BREQ _0x14
                 ; 0000 010B         return 0;
0000b9 e0e0      	LDI  R30,LOW(0)
0000ba c02b      	RJMP _0x2000001
                 ; 0000 010C 
                 ; 0000 010D     // Write the Rest of Location Address(8 Bits)
                 ; 0000 010E     TWIWrite((unsigned char) addr);
                 _0x14:
0000bb 81ec      	LDD  R30,Y+4
0000bc d063      	RCALL SUBOPT_0x2
                 ; 0000 010F     // Get State
                 ; 0000 0110     state = TWIGetStatus();
                 ; 0000 0111     // check if it is TW_MT_DATA_ACK
                 ; 0000 0112     if(state != TW_MT_DATA_ACK)
0000bd f011      	BREQ _0x15
                 ; 0000 0113         return 0;
0000be e0e0      	LDI  R30,LOW(0)
0000bf c026      	RJMP _0x2000001
                 ; 0000 0114 
                 ; 0000 0115     // Now The Master Will Be Master Reciever
                 ; 0000 0116 
                 ; 0000 0117     // Now we need to Send Start Bit Again
                 ; 0000 0118     // Start TWI
                 ; 0000 0119     TWIStart();
                 _0x15:
0000c0 dfb6      	RCALL _TWIStart
                 ; 0000 011A     // Get State
                 ; 0000 011B     state = TWIGetStatus();
0000c1 dfce      	RCALL _TWIGetStatus
0000c2 2f1e      	MOV  R17,R30
                 ; 0000 011C     // Check if TW_REP_START
                 ; 0000 011D     if(state != TW_REP_START)
0000c3 3110      	CPI  R17,16
0000c4 f011      	BREQ _0x16
                 ; 0000 011E         return 0;
0000c5 e0e0      	LDI  R30,LOW(0)
0000c6 c01f      	RJMP _0x2000001
                 ; 0000 011F 
                 ; 0000 0120     // Send Slave Address -> For EEPROM 24cXX
                 ; 0000 0121     // The Slave Address of Chip is 0b1010, so have Three bits free
                 ; 0000 0122     // We can take a part from 11 bit address and send it with Device Add
                 ; 0000 0123     // Send 3 MSBs From Address "As Device Address"
                 ; 0000 0124     // Set Action to Read -> 1
                 ; 0000 0125     _3MSBAddr = ((unsigned char) ((addr&0x0700)>>7));
                 _0x16:
0000c7 81ec      	LDD  R30,Y+4
0000c8 81fd      	LDD  R31,Y+4+1
0000c9 70e0      	ANDI R30,LOW(0x700)
0000ca 70f7      	ANDI R31,HIGH(0x700)
0000cb 940e 0134 	CALL __LSRW3
0000cd 940e 0132 	CALL __LSRW4
0000cf 2f0e      	MOV  R16,R30
                 ; 0000 0126     TWIWrite(0xA0|_3MSBAddr|1);
0000d0 2fe0      	MOV  R30,R16
0000d1 6ae1      	ORI  R30,LOW(0xA1)
0000d2 93ea      	ST   -Y,R30
0000d3 dfac      	RCALL _TWIWrite
                 ; 0000 0127     // Get Status
                 ; 0000 0128     state = TWIGetStatus();
0000d4 dfbb      	RCALL _TWIGetStatus
0000d5 2f1e      	MOV  R17,R30
                 ; 0000 0129     // Check if it is TW_MR_SLA_ACK
                 ; 0000 012A     if(state != TW_MR_SLA_ACK)
0000d6 3410      	CPI  R17,64
0000d7 f011      	BREQ _0x17
                 ; 0000 012B         return 0;
0000d8 e0e0      	LDI  R30,LOW(0)
0000d9 c00c      	RJMP _0x2000001
                 ; 0000 012C 
                 ; 0000 012D     // Read Data
                 ; 0000 012E     *data =  TWIReadNACK();
                 _0x17:
0000da dfae      	RCALL _TWIReadNACK
0000db 81aa      	LDD  R26,Y+2
0000dc 81bb      	LDD  R27,Y+2+1
0000dd 93ec      	ST   X,R30
                 ; 0000 012F     // Get Status
                 ; 0000 0130     state = TWIGetStatus();
0000de dfb1      	RCALL _TWIGetStatus
0000df 2f1e      	MOV  R17,R30
                 ; 0000 0131     // Check if it is
                 ; 0000 0132     if(state != TW_MR_DATA_NACK)
0000e0 3518      	CPI  R17,88
0000e1 f011      	BREQ _0x18
                 ; 0000 0133         return 0;
0000e2 e0e0      	LDI  R30,LOW(0)
0000e3 c002      	RJMP _0x2000001
                 ; 0000 0134 
                 ; 0000 0135    // TWI Stop
                 ; 0000 0136    TWIStop();
                 _0x18:
0000e4 df98      	RCALL _TWIStop
                 ; 0000 0137    // Return Done
                 ; 0000 0138    return 1;
0000e5 e0e1      	LDI  R30,LOW(1)
                 _0x2000001:
0000e6 8119      	LDD  R17,Y+1
0000e7 8108      	LDD  R16,Y+0
0000e8 9626      	ADIW R28,6
0000e9 9508      	RET
                 ; 0000 0139 }
                 ;
                 ;void main(void)
                 ; 0000 013C {
                 _main:
                 ; 0000 013D     // Declare Variables
                 ; 0000 013E     unsigned char content = 0;
                 ; 0000 013F     // Init Functions
                 ; 0000 0140     MCU_Init();
                 ;	content -> R17
0000ea e010      	LDI  R17,0
0000eb df5c      	RCALL _MCU_Init
                 ; 0000 0141     I2C_Init();
0000ec df82      	RCALL _I2C_Init
                 ; 0000 0142 
                 ; 0000 0143     EEPROM_WriteByte(0x0002, 0x58);
0000ed e0e2      	LDI  R30,LOW(2)
0000ee e0f0      	LDI  R31,HIGH(2)
0000ef 93fa      	ST   -Y,R31
0000f0 93ea      	ST   -Y,R30
0000f1 e5e8      	LDI  R30,LOW(88)
0000f2 93ea      	ST   -Y,R30
0000f3 dfa3      	RCALL _EEPROM_WriteByte
                 ; 0000 0144     delay_ms(1000);
0000f4 eee8      	LDI  R30,LOW(1000)
0000f5 e0f3      	LDI  R31,HIGH(1000)
0000f6 93fa      	ST   -Y,R31
0000f7 93ea      	ST   -Y,R30
0000f8 940e 0126 	CALL _delay_ms
                 ; 0000 0145     EEPROM_ReadByte(0x0002, &content);
0000fa e0e2      	LDI  R30,LOW(2)
0000fb e0f0      	LDI  R31,HIGH(2)
0000fc 93fa      	ST   -Y,R31
0000fd 93ea      	ST   -Y,R30
0000fe b7ed      	IN   R30,SPL
0000ff b7fe      	IN   R31,SPH
000100 93fa      	ST   -Y,R31
000101 93ea      	ST   -Y,R30
000102 931f      	PUSH R17
000103 dfad      	RCALL _EEPROM_ReadByte
000104 911f      	POP  R17
                 ; 0000 0146     PORTA = content;
000105 bb1b      	OUT  0x1B,R17
                 ; 0000 0147 
                 ; 0000 0148     while(1)
                 _0x19:
                 ; 0000 0149     {
                 ; 0000 014A         // Infinte Loop
                 ; 0000 014B 
                 ; 0000 014C     }
000106 cfff      	RJMP _0x19
                 ; 0000 014D }
                 _0x1C:
000107 cfff      	RJMP _0x1C
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
000108 931a      	ST   -Y,R17
000109 930a      	ST   -Y,R16
00010a e010      	LDI  R17,0
00010b e000      	LDI  R16,0
00010c df6a      	RCALL _TWIStart
00010d df82      	RCALL _TWIGetStatus
00010e 2f1e      	MOV  R17,R30
00010f 3018      	CPI  R17,8
000110 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x1:
000111 70e0      	ANDI R30,LOW(0x700)
000112 70f7      	ANDI R31,HIGH(0x700)
000113 940e 0134 	CALL __LSRW3
000115 940e 0132 	CALL __LSRW4
000117 2f0e      	MOV  R16,R30
000118 2fe0      	MOV  R30,R16
000119 6ae0      	ORI  R30,LOW(0xA0)
00011a 93ea      	ST   -Y,R30
00011b df64      	RCALL _TWIWrite
00011c df73      	RCALL _TWIGetStatus
00011d 2f1e      	MOV  R17,R30
00011e 3118      	CPI  R17,24
00011f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
000120 93ea      	ST   -Y,R30
000121 df5e      	RCALL _TWIWrite
000122 df6d      	RCALL _TWIGetStatus
000123 2f1e      	MOV  R17,R30
000124 3218      	CPI  R17,40
000125 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000126 91e9      	ld   r30,y+
000127 91f9      	ld   r31,y+
000128 9630      	adiw r30,0
000129 f039      	breq __delay_ms1
                 __delay_ms0:
                +
00012a ed80     +LDI R24 , LOW ( 0x7D0 )
00012b e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00012c 9701     +SBIW R24 , 1
00012d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00012e 95a8      	wdr
00012f 9731      	sbiw r30,1
000130 f7c9      	brne __delay_ms0
                 __delay_ms1:
000131 9508      	ret
                 
                 __LSRW4:
000132 95f6      	LSR  R31
000133 95e7      	ROR  R30
                 __LSRW3:
000134 95f6      	LSR  R31
000135 95e7      	ROR  R30
                 __LSRW2:
000136 95f6      	LSR  R31
000137 95e7      	ROR  R30
000138 95f6      	LSR  R31
000139 95e7      	ROR  R30
00013a 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   8 r17:  24 r18:   0 r19:   0 r20:   0 r21:   0 r22:   0 r23:   0 
r24:   6 r25:   2 r26:   3 r27:   2 r28:   4 r29:   1 r30: 130 r31:  22 
x  :   3 y  :  34 z  :   0 
Registers used: 12 out of 35 (34.3%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   4 and   :   0 andi  :   8 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  14 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :   4 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   5 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   2 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   0 cpc   :   0 cpi   :   6 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   7 inc   :   0 jmp   :  22 ld    :   4 ldd   :  15 ldi   :  47 
lds   :   0 lpm   :   0 lsl   :   0 lsr   :   4 mov   :  12 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   2 out   :  51 pop   :   1 push  :   1 rcall :  25 ret   :  13 
reti  :   0 rjmp  :  13 rol   :   0 ror   :   4 sbc   :   0 sbci  :   0 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   3 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  18 std   :   0 sts   :   0 sub   :   0 subi  :   0 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 27 out of 116 (23.3%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000276    630      0    630   32768   1.9%
[.dseg] 0x000060 0x000260      0      0      0    2143   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
