
UART_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000085  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001e3  00000000  00000000  00000229  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000017c  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001a8  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00000730  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000f7  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000050  00000000  00000000  000008a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <avr/io.h>
#include "my_uart.h"

int main(void)
{
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	df 93       	push	r29
  98:	cf 93       	push	r28
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	64 97       	sbiw	r28, 0x14	; 20
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	unsigned char x[20];
	UART_Init();
  aa:	0e 94 61 00 	call	0xc2	; 0xc2 <UART_Init>
	while(1)
	{
		UART_GetString(x);
  ae:	8e 01       	movw	r16, r28
  b0:	0f 5f       	subi	r16, 0xFF	; 255
  b2:	1f 4f       	sbci	r17, 0xFF	; 255
  b4:	c8 01       	movw	r24, r16
  b6:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_GetString>
		UART_SendString(x);
  ba:	c8 01       	movw	r24, r16
  bc:	0e 94 71 00 	call	0xe2	; 0xe2 <UART_SendString>
  c0:	f9 cf       	rjmp	.-14     	; 0xb4 <main+0x22>

000000c2 <UART_Init>:
#include <avr/io.h>

void UART_Init(void)
{
	// Set BaudRate -> 9600/8MhZ
	UBRRL = 51;
  c2:	83 e3       	ldi	r24, 0x33	; 51
  c4:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0;
  c6:	10 bc       	out	0x20, r1	; 32
	// Set Frame Formta -> 8 data, 1 stop, No Parity
	UCSRC = 0x86;
  c8:	86 e8       	ldi	r24, 0x86	; 134
  ca:	80 bd       	out	0x20, r24	; 32
	// Enable RX and TX
	UCSRB = 0x18;
  cc:	88 e1       	ldi	r24, 0x18	; 24
  ce:	8a b9       	out	0x0a, r24	; 10
}
  d0:	08 95       	ret

000000d2 <UART_SendChar>:

void UART_SendChar(unsigned char data)
{
	// Wait untill transmission Register Empty
	while((UCSRA&0x20) == 0x00);
  d2:	5d 9b       	sbis	0x0b, 5	; 11
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <UART_SendChar>
	UDR = data;
  d6:	8c b9       	out	0x0c, r24	; 12
}
  d8:	08 95       	ret

000000da <UART_GetChar>:

unsigned char UART_GetChar(void)
{
	// Wait untill Reception Complete
	while((UCSRA&0x80) == 0x00);
  da:	5f 9b       	sbis	0x0b, 7	; 11
  dc:	fe cf       	rjmp	.-4      	; 0xda <UART_GetChar>
	return UDR;
  de:	8c b1       	in	r24, 0x0c	; 12
}
  e0:	08 95       	ret

000000e2 <UART_SendString>:

void UART_SendString(unsigned char *str)
{
  e2:	fc 01       	movw	r30, r24
  e4:	04 c0       	rjmp	.+8      	; 0xee <UART_SendString+0xc>
}

void UART_SendChar(unsigned char data)
{
	// Wait untill transmission Register Empty
	while((UCSRA&0x20) == 0x00);
  e6:	5d 9b       	sbis	0x0b, 5	; 11
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <UART_SendString+0x4>
	UDR = data;
  ea:	8c b9       	out	0x0c, r24	; 12
void UART_SendString(unsigned char *str)
{
	while(*str != '\0')
	{
		UART_SendChar(*str);
		str++;
  ec:	31 96       	adiw	r30, 0x01	; 1
	return UDR;
}

void UART_SendString(unsigned char *str)
{
	while(*str != '\0')
  ee:	80 81       	ld	r24, Z
  f0:	88 23       	and	r24, r24
  f2:	c9 f7       	brne	.-14     	; 0xe6 <UART_SendString+0x4>
	{
		UART_SendChar(*str);
		str++;
	}
}
  f4:	08 95       	ret

000000f6 <UART_GetString>:

void UART_GetString(unsigned char *str)
{
  f6:	fc 01       	movw	r30, r24
}

unsigned char UART_GetChar(void)
{
	// Wait untill Reception Complete
	while((UCSRA&0x80) == 0x00);
  f8:	5f 9b       	sbis	0x0b, 7	; 11
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <UART_GetString+0x2>
	return UDR;
  fc:	8c b1       	in	r24, 0x0c	; 12
{
	unsigned char temp = 0;
	do
	{
		temp = UART_GetChar();
		*str = temp;
  fe:	80 83       	st	Z, r24
		str++;
	}while(temp != '#');
 100:	83 32       	cpi	r24, 0x23	; 35
 102:	11 f0       	breq	.+4      	; 0x108 <UART_GetString+0x12>
	unsigned char temp = 0;
	do
	{
		temp = UART_GetChar();
		*str = temp;
		str++;
 104:	31 96       	adiw	r30, 0x01	; 1
 106:	f8 cf       	rjmp	.-16     	; 0xf8 <UART_GetString+0x2>
	}while(temp != '#');
	
	str--;
	*str = '\0';
 108:	10 82       	st	Z, r1
}
 10a:	08 95       	ret

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
